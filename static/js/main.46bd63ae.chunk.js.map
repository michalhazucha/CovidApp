{"version":3,"sources":["assets/img/19.png","assets/img/r-o-r.png","redux/actions/types.ts","redux/reducers/countryReducer.ts","redux/reducers/rootReducer.ts","redux/actions/actionCreators/countryActionCreators.ts","redux/sagas/countrySaga.ts","redux/store/store.ts","components/InfoCard/index.tsx","components/Informations/index.tsx","components/Navigation/index.tsx","components/WelcomePage/index.tsx","components/Footer/index.tsx","components/Graph/index.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ActionTypes","initialState","countries","name","country","error","countryReducer","state","action","type","fetchCountries","payload","fetchError","message","setName","getName","fetchData","errorData","rootReducer","combineReducers","fetchCountriesAction","data","fetchDataAction","onRecieveCountries","onRecieveCountry","watchOnLoadCountry","watchOnLoadCountries","countrySaga","rootSaga","axios","get","put","URL","toLowerCase","replace","headers","takeEvery","getCountries","all","fork","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","Body","Card","Title","Text","InfoCard","Heading","Content","Date","AlternativeData","className","moment","format","icon","faLongArrowAltUp","String","faLongArrowAltDown","Informations","props","Container","Country","TotalCases","NewCases","Division","Status","Row","Col","xs","sm","md","Error","Navigation","dispatch","useDispatch","useEffect","useSelector","countriesArray","sort","a","b","localeCompare","useState","setCountry","search","setSearch","filteredCountries","setFilteredCountries","filter","c","Slug","includes","handleSetName","e","setNameAction","Navbar","variant","expand","Brand","href","alt","src","require","Form","inline","FormControl","placeholder","onClick","onChange","target","value","DropdownButton","alignRight","title","id","map","Dropdown","Item","eventKey","onSelect","Button","index","Graph","devision","formatXAxis","tickItem","lastWeek","slice","length","style","height","width","margin","top","right","left","bottom","strokeDasharray","dataKey","tickFormatter","labelFormatter","stroke","activeDot","r","strokeWidth","App","console","log","liveData","dayBefore","countryData","newCases","division","WelcomePage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.46bd63ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/19.026e38ab.png\";","module.exports = __webpack_public_path__ + \"static/media/r-o-r.9556b8b4.png\";","export enum ActionTypes {\n  getCountries = 'GET_COUNTRIES',\n  fetchCountries = 'FETCH_COUNTRIES',\n  fetchError = 'COUNTRIES_LOAD_FAILED',\n  setName = 'SET_NAME',\n  getName = 'GET_NAME',\n  fetchData = 'FETCH_DATA',\n  errorData = 'ERROR_DATA',\n}\n","import { IState } from '../../interfaces';\nimport { ActionTypes } from '../actions/types';\nconst initialState: IState = {\n  countries: [],\n  name: '',\n  country: [],\n  error: '',\n};\n\nconst countryReducer = (state = initialState, action: any) => {\n  switch (action.type) {\n    case ActionTypes.fetchCountries:\n      return { ...state, countries: action.payload };\n    case ActionTypes.fetchError:\n      return { ...state, error: action.message };\n    case ActionTypes.setName:\n      return {\n        ...state,\n        name: action.payload,\n      };\n    case ActionTypes.getName:\n      return { ...state, name: action.payload };\n    case ActionTypes.fetchData:\n      return { ...state, country: action.payload };\n    case ActionTypes.errorData:\n      return { ...state, error: action.message };\n    default:\n      return state;\n  }\n};\n\nexport default countryReducer;\n","import { combineReducers } from 'redux';\nimport countryReducer from './countryReducer';\n\nconst rootReducer = combineReducers({\n  country: countryReducer,\n});\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { ActionTypes } from '../types';\nimport { ICountry } from '../../../interfaces';\n\nexport const getCountries = () => {\n  return {\n    type: ActionTypes.getCountries,\n  };\n};\nexport const fetchCountriesAction = (data: Array<any>) => {\n  return {\n    type: ActionTypes.fetchCountries,\n    payload: data,\n  };\n};\nexport const FetchErrorAction = () => {\n  return { type: ActionTypes.fetchError, message: 'Countries fetch failed' };\n};\nexport const setNameAction = (e: MouseEvent) => {\n  return { type: ActionTypes.setName, payload: e };\n};\nexport const getNameAction = (name: String) => {\n  return {\n    type: ActionTypes.getName,\n    payload: name,\n  };\n};\nexport const fetchDataAction = (data: ICountry) => {\n  return {\n    type: ActionTypes.fetchData,\n    payload: data,\n  };\n};\nexport const dataErrorAction = () => {\n  return {\n    type: ActionTypes.errorData,\n    message: 'No data about this Country',\n  };\n};\n","import { put, takeEvery, all, fork } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { fetchDataAction, fetchCountriesAction, dataErrorAction, FetchErrorAction } from '../actions/actionCreators/countryActionCreators';\nimport { ActionTypes } from '../actions/types';\n\nconst APIKEY = '5756f9c8-90f8-477b-8757-4462aa63f76f';\nfunction* onRecieveCountries() {\n  try {\n    const URL = `https://api.covid19api.com/countries`;\n    const { data } = yield axios.get(URL);\n    yield put(fetchCountriesAction(data));\n  } catch (e) {\n    yield put(FetchErrorAction());\n  }\n}\nfunction* onRecieveCountry({ payload }: String | any) {\n  try {\n    const URL = `https://api.covid19api.com/premium/country/${payload.toLowerCase().replace(/ /g, '-')}`;\n    const { data } = yield axios.get(URL, {\n      headers: {\n        'X-Access-Token': APIKEY,\n      },\n    });\n    yield put(fetchDataAction(data));\n  } catch {\n    yield put(dataErrorAction());\n  }\n}\nfunction* watchOnLoadCountry() {\n  yield takeEvery(ActionTypes.getName, onRecieveCountry);\n}\nfunction* watchOnLoadCountries() {\n  yield takeEvery(ActionTypes.getCountries, onRecieveCountries);\n}\n\nfunction* countrySaga() {\n  yield all([fork(watchOnLoadCountries), fork(watchOnLoadCountry)]);\n}\nexport default function* rootSaga() {\n  yield all([fork(countrySaga)]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport rootReducer from '../reducers/rootReducer';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootSaga from '../sagas/countrySaga';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\nsagaMiddleware.run(rootSaga);\nexport default store;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLongArrowAltUp, faLongArrowAltDown } from '@fortawesome/free-solid-svg-icons';\nimport { Card } from 'react-bootstrap';\nimport moment from 'moment';\nconst { Body, Title, Text } = Card;\nconst InfoCard = ({ Heading, Content, Date, AlternativeData }: any) => {\n  return (\n    <Card>\n      <Body>\n        <Title className=\"h3\">{Heading}</Title>\n        {Date ? <Text className=\"h2 text-dark\">{moment(Date).format('DD MMM YYYY')}</Text> : <Text className=\"h2 text-dark\">{Content}</Text>}\n        {AlternativeData ? (\n          AlternativeData! < 0 ? (\n            <h4 className=\"text-danger\">\n              <FontAwesomeIcon icon={faLongArrowAltUp} /> {String(AlternativeData).replace('-', '')}\n            </h4>\n          ) : (\n            <h4 className=\"text-success\">\n              <FontAwesomeIcon icon={faLongArrowAltDown} /> {AlternativeData}\n            </h4>\n          )\n        ) : (\n          ''\n        )}\n      </Body>\n    </Card>\n  );\n};\n\nexport default InfoCard;\n","import React from 'react';\nimport './Informations.scss';\nimport { ICountry } from '../../interfaces';\nimport InfoCard from '../InfoCard';\nimport { Container, Row, Col } from 'react-bootstrap';\nconst Informations = (props: ICountry | any) => {\n  return (\n    <Container className=\"m-3 d-flex\">\n      {props.Country || props.TotalCases || props.NewCases || props.Division || props.Status || props.Date ? (\n        <Row className=\"w-100\">\n          {props.Country ? (\n            <Col>\n              <InfoCard Heading=\"Krajina\" Content={props.Country} />\n            </Col>\n          ) : (\n            ''\n          )}\n          {props.TotalCases || {} ? (\n            <Col xs={12} sm={6} md={3}>\n              <InfoCard Heading=\"Prípadov Doteraz\" Content={props.TotalCases} />\n            </Col>\n          ) : (\n            'Hello'\n          )}\n          {props.NewCases || props.Division || {} ? (\n            <Col xs={12} sm={6} md={3}>\n              <InfoCard Heading=\"Nových Prípadov\" Content={props.NewCases} AlternativeData={props.Division} />\n            </Col>\n          ) : (\n            ''\n          )}\n          {props.Date || {} ? (\n            <Col xs={12} sm={6} md={3}>\n              <InfoCard Heading=\"Aktualizované\" Date={props.Date} />\n            </Col>\n          ) : (\n            ''\n          )}\n        </Row>\n      ) : (\n        <Row>\n          <Col>\n            <Container className=\"text-center\">\n              {props.Error ? (\n                <Col>\n                  <InfoCard Heading=\"Oops Chyba\" Content=\"O tejto krajine nemáme bohužiaľ žiadne informácie\" />\n                </Col>\n              ) : (\n                ''\n              )}\n            </Container>\n          </Col>\n        </Row>\n      )}\n    </Container>\n  );\n};\nexport default Informations;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { IState } from '../../interfaces';\nimport { getCountries, getNameAction, setNameAction } from '../../redux/actions/actionCreators/countryActionCreators';\nimport { Container, Navbar, Form, FormControl, Button, Dropdown, DropdownButton } from 'react-bootstrap';\nimport './Navbar.scss';\n\nconst Navigation = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getCountries());\n  }, []);\n  const { error } = useSelector((state: IState) => state.country);\n  const { countries } = useSelector((state: IState) => state.country);\n  const countriesArray = countries.sort((a: String | any, b: String | any) => a.Country.localeCompare(b.Country));\n  const [country, setCountry] = useState('');\n  const [search, setSearch] = useState('');\n  const [filteredCountries, setFilteredCountries] = useState([]);\n  useEffect(() => {\n    setFilteredCountries(countriesArray.filter((c: any) => c.Slug.includes(search.toLowerCase())));\n  }, [search, countries]);\n\n  const handleGetName = (e: any) => {\n    dispatch(getNameAction(country));\n  };\n  const handleSetName = (e: any) => {\n    setNameAction(e);\n  };\n  return (\n    <Navbar variant=\"dark\" expand=\"lg\" className=\"bg-primary d-flex justify-content-between navbar sticky-top\">\n      {' '}\n      <Container>\n        <Navbar.Brand href=\"#home\" className=\"p-2\">\n          <strong>\n            COVID <img className=\"navbar__logo\" alt=\"covid-19 logo\" src={require('../../assets/img/19.png')} /> World Informations\n          </strong>\n        </Navbar.Brand>\n        {error === 'Countries fetch failed' ? (\n          <div className=\" btn-lg  btn-danger\">Chyba pripojenia k vzdialenému serveru! Skúste to prosím neskôr</div>\n        ) : (\n          <Form inline className=\" p-2 justify-content-between\">\n            <FormControl\n              type=\"text\"\n              placeholder=\"Zadajte Meno Krajiny\"\n              className=\" mx-3 searchbar\"\n              onClick={handleSetName}\n              onChange={(e) => {\n                setSearch(e.target.value);\n              }}\n            />\n            <DropdownButton alignRight title={country ? country : 'Vyber Krajinu'} id=\"dropdown-menu-align-right\" className=\"mx-3\">\n              {filteredCountries.map((c: any) => (\n                <Dropdown.Item\n                  eventKey={c.Slug}\n                  onSelect={handleSetName}\n                  onClick={() => {\n                    setCountry(c.Country);\n                  }}\n                >\n                  {c.Country}\n                </Dropdown.Item>\n              ))}\n            </DropdownButton>\n            <Button variant=\"light\" onClick={handleGetName}>\n              Search\n            </Button>\n          </Form>\n        )}\n      </Container>\n    </Navbar>\n  );\n};\nexport default Navigation;\n","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './welcomePage.scss';\nconst index = () => {\n  return (\n    <Container className=\"py-3\">\n      <Row>\n        <Col xs={12} className=\"h100 d-flex flex-column justify-content-start align-items-center px-xs-1 px-md-5 my-1\">\n          <h1 className=\"text-secondary hero-heading text-uppercase hero-cover__title\">\n            COVID <img alt=\"covid-19 logo\" className=\"hero-cover__logo\" src={require('../../assets/img/19.png')} /> World Information\n          </h1>\n\n          <div className=\" hero-cover__text text-start pt-xs-2 pt-md-4\">\n            <p className=\"hero-cover__subtitle  text-center text-light bg-secondary p-2\">Stránka na ktorej sa dozviete najčerstvejšie informácie o vývoji pandémie COVID-19 v krajinách celého sveta</p>\n            <p className=\"text-secondary\">\n              Pre zistenie informácií o vývoji pandémie prosím <strong>vyberte svoju krajinu zo zoznamu krajín a stlačte tlačidlo search.</strong>\n            </p>\n            <p className=\"text-secondary\">\n              V prípade, že vidíte upozornenie v červenom rámčeku <strong>Chyba pripojenia k vzdialenému serveru </strong>, skúste to prosím neskôr.\n            </p>\n            <p className=\"text-secondary\">\n              Pre rýchlejšie nájdenie vami žiadaniej krajiny môžete <strong>zadať názov krajiny do vyhľadávača</strong>\n            </p>\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default index;\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport './Footer.scss';\nconst index = () => {\n  return (\n    <div className=\"footer sticky-bottom mw100 bg-light-blue\">\n      <Container className=\"d-flex flex-column align-items-center\">\n        <h3 className=\"text-light pt-3\">Dodržiavajte zásady ROR</h3>\n        <img className=\"footer-image\" src={require('../../assets/img/r-o-r.png')} alt=\"Rúško odstup Ruky\" />\n      </Container>\n    </div>\n  );\n};\n\nexport default index;\n","import moment from 'moment';\nimport React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\nimport { LineChart, XAxis, Line, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { IState } from '../../interfaces';\nconst { Body } = Card;\n\nconst Graph = ({ devision }: any) => {\n  const { country } = useSelector((state: IState) => state.country);\n  //format date\n  const formatXAxis = (tickItem: any) => {\n    tickItem = moment(tickItem).format('MMM Do YY');\n    return tickItem;\n  };\n  const lastWeek = country.slice(country.length - 7, country.length);\n  //const lastWeekDate = country.slice(country.length - 7, country.length);\n  return (\n    <Card>\n      <Body style={{ height: '75vh' }}>\n        <ResponsiveContainer width=\"100%\" height=\"80%\">\n          <LineChart\n            width={1000}\n            height={500}\n            data={[...lastWeek]}\n            margin={{\n              top: 5,\n              right: 20,\n              left: 20,\n              bottom: 5,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"5 5\" />\n            <XAxis dataKey=\"Date\" tickFormatter={formatXAxis} />\n            <YAxis />\n            <Tooltip labelFormatter={formatXAxis} />\n            <Legend />\n            <Line type=\"monotone\" data={[...lastWeek]} dataKey=\"NewCases\" stroke={devision >= 0 ? '#42b983' : '#dc3545'} activeDot={{ r: 6 }} strokeWidth={6} />\n          </LineChart>\n        </ResponsiveContainer>\n      </Body>\n    </Card>\n  );\n};\n\nexport default Graph;\n","import React, { Fragment } from 'react';\nimport { useSelector } from 'react-redux';\nimport Informations from '../Informations';\nimport Navigation from '../Navigation';\nimport WelcomePage from '../WelcomePage';\nimport Footer from '../Footer';\nimport Graph from '../Graph';\nimport './App.scss';\nimport { Container } from 'react-bootstrap';\nimport { IState } from '../../interfaces';\nconst App = () => {\n  const { error } = useSelector((state: IState) => state.country);\n  const { country } = useSelector((state: IState) => state.country);\n  const { name } = useSelector((state: IState) => state.country);\n  console.log(country);\n  /*math logic*/\n  const liveData = country.length - 1;\n  const dayBefore = country.length - 2;\n  const countryData = country[liveData];\n  const newCases = country.map((c: any) => c.NewCases);\n  const division = newCases[dayBefore] - newCases[liveData];\n\n  const { Country, TotalCases, NewCases, Status, Date } = useSelector((state: any) => countryData || {});\n  console.log(`country:${country.length}\\nname:${name}`);\n  return (\n    <div className=\"App h100\">\n      <Navigation />\n      <Container>\n        {country.length === 0 && name !== '' ? (\n          <Informations Error={Error} />\n        ) : error === '' && country === [] ? (\n          'Vyberte krajinu'\n        ) : country.length > 0 && name !== '' ? (\n          <Fragment>\n            <Informations Country={Country} TotalCases={TotalCases} NewCases={NewCases} Division={division} Status={Status} Date={Date} />\n            <Graph devision={division} />\n          </Fragment>\n        ) : (\n          <WelcomePage />\n        )}\n      </Container>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store/store';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}